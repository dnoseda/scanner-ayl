aliases:
  all_chars: "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ \n\t"
  all_chars_no_ochar: "!\"#$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ \n\t"
  letter: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
  number: 1234567890
  ostring: "\""
  ochar: "'"
  blank: " "
  dot: "."
  newline: "\n"
  slash: "/"
  asterisk: "*"
  plus: "+"
  minus: "-"
  equal: "="
  power: "^"
  logic_and: "&"
  logic_or: "|"
  open_parenthesis: "("
  close_parenthesis: ")"
  open_bracket: "["
  close_bracket: "]"
  open_brace: "{"
  close_brace: "}"
  percentage: "%"
  bigger: ">"
  lesser: "<"
  tab: "\t"
  comma: ","
  semicolon: ";"
transitions:
  initial:
    letter: ident    
    number: int    
    "blank+newline+tab": sep
    ostring: string_prev
    ochar: char_prev
    slash: comment_init
    "*": multiplication
    plus: sum_init
    minus: difference
    equal: assignation
    power: power
    logic_and: logic_and_prev
    logic_or: logic_or_prev
    open_parenthesis: o_p
    close_parenthesis: c_p
    open_bracket: o_bracket
    close_bracket: c_bracket
    open_brace: o_brace
    close_brace: c_brace
    percentage: pct
    bigger: bigger
    lesser: lesser
    comma: comma
    semicolon: semicolon
    $: end
  assignation:
    =: equal
    "!\"#$%&'()*+,-./0123456789:;<>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ \n\t": assignation_final
  logic_and_prev:
    logic_and: logic_and
  logic_or_prev:
    logic_or: logic_or
  comment_init:
    slash: comment_line
    asterisk: multi_comment
    "letter+number+dot+blank+newline+tab+$": division_final
  comment_line:
    "letter+number+dot+blank": comment_line
    "newline+$": comment_line_final
  multi_comment:
    "letter+number+dot+newline+slash+blank": multi_comment
    asterisk: multi_comment_final_prev
  multi_comment_final_prev:
     "letter+number+dot+newline+blank": multi_comment
     slash: multi_comment_final
     asterisk: multi_comment_final_prev
  char_prev:
    "letter+number+blank+dot+ostring": char
  char:
    "'": char_final
    all_chars_no_ochar: char_error 
  string_prev:
    "letter+number+dot+blank": string
  string:
    "letter+number+dot+blank": string
    "\"": string_final
    "\n": string_incomplette_final
  ident:
    "letter+number": ident
    " .$\"'+blank+newline+tab": ident_final    
  int:
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$\"'+blank+newline+tab": int_final
    "1234567890": int
    .: real_aux
  real_aux:
    "1234567890": real
  real:
    "1234567890": real
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.$'/+blank+newline+tab": real_final
  sum_init:
    "letter+number+dot+blank+newline+tab+$": sum
    "=": sum_assign
    plus: post_increment  
semanticActions:
  comment_line_final:
    discard: true
  multi_comment_final:
    discard: true  
  string_incomplette_final:
    token_id: "CADENA_INCOMPLETA_ERROR"
    have_value: true
    reset: false
    clean: true
  char_error:
    token_id: "CARACTER_ERROR"
    have_value: true
    reset: false
    clean: true
  char_final:
    token_id: "CARACTER"
    have_value: true
    reset: false
    clean: true
  string_final:
    token_id: "CADENA"
    have_value: true
    reset: false
    clean: true
  ident_final:
    token_id: "ID"
    limit: 16
    have_value: true
    reset: true
    clean: true
  int_final:
    token_id: "ENTERO"
    have_value: true
    reset: true
    clean: true
  real_final:
    token_id: "REAL"
    have_value: true
    reset: true
    clean: true
  sep:
    discard: true
  ident:
    save_value: true
  int:
    save_value: true
  real:
    save_value: true
  real_aux:
    save_value: true
  string:
    save_value: true
  char:
    save_value: true
  division_final:
    token_id: "DIVISION"
    reset: true
    clean: true
  multiplication:
    token_id: "MULTIPLICATION"
  sum:
    token_id: "SUM"
    reset: true
    clean: true
  sum_assign:
    token_id: "SUMASSIGN"
  post_increment:
   token_id: "POSTINCREMENT"
  difference:
    token_id: "DIFFERENCE"
  equal:
    token_id: "EQUAL"
  assignation_final:
    token_id: "ASSIGNATION"
  power:
    token_id: "POWER"
  logic_and:
    token_id: "LOGIC_AND"
  logic_or:
    token_id: "LOGIC_OR"
  o_p:
    token_id: "O_P"
  c_p:
    token_id: "C_P"
  o_bracket:
    token_id: "O_BRACKET"
  c_bracket:
    token_id: "C_BRACKET"
  o_brace:
    token_id: "O_BRACE"
  c_brace:
    token_id: "C_BRACE"
  pct:
    token_id: "PCT"
  bigger:
    token_id: "BIGGER"
  lesser:
    token_id: "LESSER"
  comma:
    token_id: "COMMA"
  semicolon:
    token_id: "SEMICOLON"
reservedWords:
   abstract: "ABSTRACT"
   boolean: "BOOLEAN"
   break: "BREAK"
   byte: "BYTE"
   case: "CASE"
   catch: "CATCH"
   char: "CHAR"
   class: "CLASS"
   const: "CONST"
   continue: "CONTINUE"
   default: "DEFAULT"
   do: "DO"
   double: "DOUBLE"
   else: "ELSE"
   extends: "EXTENDS"
   false: "FALSE"
   final: "FINAL"
   finally: "FINALLY"
   float: "FLOAT"
   for: "FOR"
   goto: "GOTO"
   if: "IF"
   implements: "IMPLEMENTS"
   import: "IMPORT"
   instanceof: "INSTANCEOF"
   int: "INT"
   interface: "INTERFACE"
   long: "LONG"
   native: "NATIVE"
   new: "NEW"
   null: "NULL"
   package: "PACKAGE"
   private: "PRIVATE"
   protected: "PROTECTED"
   public: "PUBLIC"
   return: "RETURN"
   short: "SHORT"
   static: "STATIC"
   strictfp: "STRICTFP"
   super: "SUPER"
   switch: "SWITCH"
   synchronized: "SYNCHRONIZED"
   this: "THIS"
   throw: "THROW"
   throws: "THROWS"
   transient: "TRANSIENT"
   true: "TRUE"
   try: "TRY"
   void: "VOID"
   volatile: "VOLATILE"
   while : "WHILE"
